import {
	Ctx,
	Hears,
	InjectBot,
	Message,
	On,
	Start,
	Update
} from 'nestjs-telegraf'
import { Telegraf } from 'telegraf'
import { actionButtons, dialogButtons } from './app.buttons'
import { AppService } from './app.service'
import { questionsList, showList } from './app.utils'
import { Context } from './context.interface'

let count = 0

@Update()
export class AppUpdate {
	constructor(
		@InjectBot() private readonly bot: Telegraf<Context>,
		private readonly appService: AppService
	) { }

	@Start()
	async startCommand(ctx: Context) {
		console.log(ctx);

		ctx.session.count = 1

		await ctx.reply(`–î–æ–±—Ä—ã–π –¥–µ–Ω—å!
		–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞–ª–µ—Ä–∏—è. –Ø HR –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ Kvando Technologies. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! 
		–ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –ø–æ–æ–±—â–∞–µ–º—Å—è –¥–µ—Ç–∞–ª—å–Ω–æ`,
			actionButtons()
		)

		await ctx.reply(`1. –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É –í–∞—Å –æ–ø—ã—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–∏–π —Å–∫–æ–ª—å–∫–æ ? ${ctx}`, dialogButtons(1))
	}

	// @Hears(['1. 0', '1. 1-3 –≥–æ–¥–∞', '1. 3-6 –ª–µ—Ç', '1. –±–æ–ª—å—à–µ 6 –ª–µ—Ç'])
	// async firstTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('2. –°–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ React –∏–ª–∏ Vue ?', dialogButtons(2))
	// }

	// @Hears(['1. 0', '1. 1-3 –≥–æ–¥–∞', '1. 3-6 –ª–µ—Ç', '1. –±–æ–ª—å—à–µ 6 –ª–µ—Ç'])
	// async secondTask(ctx: Context) {
	// 	ctx.session.count = 2
	// 	console.log(ctx.session.count);
	// 	await ctx.reply('2. –°–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ React –∏–ª–∏ Vue ?', dialogButtons(2))
	// }

	// @Hears(['2. 0', '2. 1-3 –≥–æ–¥–∞', '2. 3-6 –ª–µ—Ç', '2. –±–æ–ª—å—à–µ 6 –ª–µ—Ç'])
	// async thirdTask(ctx: Context) {
	// 	ctx.session.count = 3
	// 	console.log(ctx.session.count);
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('3. –†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ?', dialogButtons(3))
	// }

	// @Hears(['3. –î–∞', '3. –ù–µ—Ç'])
	// async fourthTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('4. –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—ã–ª–æ –≤ –∫–æ–º–∞–Ω–¥–µ ?', dialogButtons(4))
	// }

	// @Hears(['4. 1-3', '4. 3-10', '4. 10+'])
	// async fifthTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('5. –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏?', dialogButtons(5))
	// }

	// @Hears('text')
	// async sixthTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('6. –ö–∞–∫–∞—è –í–∞—à–∞ –∑–ø –≤–∏–ª–∫–∞ ?', dialogButtons(6))
	// }

	// @Hears(['6. 50 - 100–∫', '6. 100 - 150–∫', '6. 150+'])
	// async seventhTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('7. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞–∫ —Ñ–∏–∑–ª–∏—Ü–æ –∏–ª–∏ —é—Ä–ª–∏—Ü–æ ?', dialogButtons(7))
	// }

	// @Hears(['7. –§–∏–∑–ª–∏—Ü–æ', '7. –§–∏–∑–ª–∏—Ü–æ –≤ —Å—Ç–∞—Ç—É—Å–µ –ò–ü'])
	// async eighthTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('8. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞–∫ –ò–ü, —Ç–æ –≥–æ—Ç–æ–≤—ã –±—ã–ª–∏ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –ò–ü –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏, —Å —É—á–µ—Ç–æ–º, —á—Ç–æ –º—ã –ø–æ–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–ª–æ–≥–∏ ?', dialogButtons(8))
	// }

	// @Hears(['8. –î–∞', '8. –ù–µ—Ç'])
	// async ninthTask(ctx: Context) {
	// 	ctx.session.type = 'create'
	// 	await ctx.reply('9. –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§ ?', dialogButtons(9))
	// }

	// @Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
	// async listTask(ctx: Context) {
	// 	const todos = await this.appService.getAll()
	// 	await ctx.reply(showList(todos))
	// }

	// @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
	// async doneTask(ctx: Context) {
	// 	ctx.session.type = 'done'
	// 	await ctx.deleteMessage()
	// 	await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
	// }

	// @Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
	// async editTask(ctx: Context) {
	// 	ctx.session.type = 'edit'
	// 	await ctx.deleteMessage()
	// 	await ctx.replyWithHTML(
	// 		'–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
	// 		'–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'
	// 	)
	// }

	// @Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
	// async deleteTask(ctx: Context) {
	// 	ctx.session.type = 'remove'
	// 	await ctx.deleteMessage()
	// 	await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
	// }

	// @On('text')
	// async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
	// 	if (!ctx.session.type) return

	// 	if (ctx.session.type === 'create') {
	// 		const todos = await this.appService.createTask(message)
	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'done') {
	// 		const todos = await this.appService.doneTask(Number(message))

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'edit') {
	// 		const [taskId, taskName] = message.split(' | ')
	// 		const todos = await this.appService.editTask(Number(taskId), taskName)

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'remove') {
	// 		const todos = await this.appService.deleteTask(Number(message))

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}
	// }

	@On('message')
	async getMsg(@Message('message') message: string, @Ctx() ctx: Context) {
		// if (!ctx.session.count) return
		const count = ctx.session.count

		if (ctx.session.count === 5) {
			// const todos = await this.appService.createTask(message)
			console.log(ctx.session.count);
			await ctx.reply(questionsList[count - 1], dialogButtons(0))
			ctx.session.count++
		}
		else {
			console.log(ctx.session.count);
			await ctx.reply(questionsList[count - 1], dialogButtons(count))
			ctx.session.count++
		}


	}

	// @On('text')
	// async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
	// 	if (!ctx.session.type) return

	// 	if (ctx.session.type === 'create') {
	// 		const todos = await this.appService.createTask(message)
	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'done') {
	// 		const todos = await this.appService.doneTask(Number(message))

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'edit') {
	// 		const [taskId, taskName] = message.split(' | ')
	// 		const todos = await this.appService.editTask(Number(taskId), taskName)

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}

	// 	if (ctx.session.type === 'remove') {
	// 		const todos = await this.appService.deleteTask(Number(message))

	// 		if (!todos) {
	// 			await ctx.deleteMessage()
	// 			await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
	// 			return
	// 		}

	// 		await ctx.reply(showList(todos))
	// 	}
	// }
}
